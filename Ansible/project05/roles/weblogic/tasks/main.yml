- name: Perform full patching
  ansible.builtin.package:
    name: '*'
    state: latest

- name: Install needed applications using vars
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  register: package_install_result
  failed_when: >
    (package_install_result.rc != 0) and
    ('already installed' not in package_install_result.msg) and
    ('Nothing to do' not in package_install_result.msg)
  vars:
    packages:
      - vim
      - zsh
      - git
      - rsyslog
      - yum-utils
      - bash-completion
      - net-tools
      - perl
      - elfutils-libelf-devel
      - tar
      - bzip2
      - bind-utils
      - firewalld
      - dnf-automatic
      - epel-release
      - wget
      - binutils
      - gcc
      - gcc-c++
      - glibc
      - glibc-devel
      - libaio
      - libaio-devel
      - libgcc
      - libstdc++
      - libstdc++-devel
      - libnsl
      - ksh
      - sysstat
      - numactl
      - numactl-devel
      - motif
      - motif-devel
      - redhat-lsb
      - redhat-lsb-core
      - openssl
      - make
      - xorg-x11-server-utils
      - xorg-x11-xauth
      - xterm

- name: Create oinstall group
  ansible.builtin.group:
    name: oinstall
    gid: 105
    state: present

- name: Add user oracle
  ansible.builtin.user:
    name: oracle
    shell: /bin/bash
    uid: 201
    groups: oinstall
    expires: -1
    home: /home/oracle
    password: "{{ oracle_password | password_hash('sha512') }}"
    create_home: true
    state: present

- name: Add user vagrant
  ansible.builtin.user:
    name: vagrant
    shell: /usr/bin/zsh
    home: /home/vagrant
    password: "{{ vagrant_password | password_hash('sha512') }}"
    create_home: true
    state: present

- name: Add sudoer rule for ansible user
  ansible.builtin.copy:
    dest: /etc/sudoers.d/vagrant
    src: etc/sudoers.d/vagrant
    owner: root
    group: root
    mode: "0440"
    validate: /usr/sbin/visudo -csf %s

- name: Check if .zshrc exists
  ansible.builtin.stat:
    path: /home/vagrant/.zshrc
  register: zshrc_result

- name: Check if .oh-my-zsh exists
  ansible.builtin.stat:
    path: /home/vagrant/.oh-my-zsh
  register: oh_my_zsh_result

- name: Cloning oh-my-zsh
  ansible.builtin.git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: /home/vagrant/.oh-my-zsh
    version: master
  when: not oh_my_zsh_result.stat.exists

- name: Set correct ownership and permission to .oh-my-zsh
  ansible.builtin.file:
    path: /home/vagrant/.oh-my-zsh
    owner: vagrant
    group: vagrant
    mode: "0750"
    recurse: true

- name: Copy .zshrc to home folder
  ansible.builtin.copy:
    dest: /home/vagrant/.zshrc
    src: .zshrc
    owner: vagrant
    group: vagrant
    mode: "0640"

- name: Check if zsh-autosuggestions exists
  ansible.builtin.stat:
    path: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  register: stat_zsh_autosuggestions_result

- name: Clone zsh-autosuggestions github repository
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    version: master
    clone: true
    update: true
    force: true
  when: not stat_zsh_autosuggestions_result.stat.exists

- name: Set correct ownership and permission to zsh-autosuggestions
  ansible.builtin.file:
    path: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    owner: vagrant
    group: vagrant
    mode: "0750"
    recurse: true

- name: Set Shell to zsh
  ansible.builtin.user:
    name: vagrant
    shell: /usr/bin/zsh

- name: Set a message of the day
  ansible.builtin.template:
    dest: /etc/motd
    src: templates/motd.j2
    owner: root
    group: root
    mode: "0644"

- name: Set a login banner
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: etc/issue
    owner: root
    group: root
    mode: "0644"
  loop:
    - /etc/issue.net

- name: Make sure rsyslog is started and enabled
  ansible.builtin.service:
    name: rsyslog
    state: started
    enabled: true

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop:
    - { path: "/home/oracle/dba", mode: "0755", owner: "oracle", group: "oinstall" }
    - { path: "/home/oracle/log", mode: "0755", owner: "oracle", group: "oinstall" }
    - { path: "/u01", mode: "0755", owner: "root", group: "oinstall" }
    - { path: "/u01/logs", mode: "0755", owner: "oracle", group: "oinstall" }
    - { path: "/u01/app/oracle", mode: "0755", owner: "oracle", group: "oinstall" }
    - { path: "/u01/app/oracle/product/{{ oracle_version }}/fmw", mode: "0755", owner: "oracle", group: "oinstall" }
    - { path: "/u01/app/oracle/product/{{ oracle_version }}/fmwjava", mode: "0755", owner: "oracle", group: "oinstall" }

- name: Copy profile files
  ansible.builtin.template:
    src: "templates/{{ item.src }}"
    dest: "/home/oracle/{{ item.dest }}"
    owner: oracle
    group: oracle
    mode: "0644"
  loop:
    - { src: "bash_profile.j2", dest: ".bash_profile" }
    - { src: "bashrc.j2", dest: ".bashrc" }

- name: Create and update /etc/oraInst.loc
  ansible.builtin.lineinfile:
    path: /etc/oraInst.loc
    line: "{{ item }}"
    create: true
    owner: oracle
    group: oinstall
    mode: "0644"
  loop:
    - "inventory_loc=/u01/app/oracle/oraInventory"
    - "inst_group=oinstall"

- name: Copy 99-oracle.conf to /etc/security/limits.d
  ansible.builtin.copy:
    dest: /etc/security/limits.d/99-oracle.conf
    src: files/etc/security/limits.d/99-oracle.conf
    owner: root
    group: root
    mode: "0640"

- name: Update sysctl.conf file
  ansible.builtin.lineinfile:
    dest: /etc/sysctl.conf
    state: present
    line: "{{ item }}"
  loop:
    - "net.core.rmem_max=2097152"
    - "net.core.wmem_max=2097152"
  notify: restart_sysctl

- name: Copy and extract JDK file
  ansible.builtin.unarchive:
    src: "files/u01/app/oracle/product/{{ oracle_version }}/fmwjava/{{ jdk_tarversion }}-linux-x64.tar.gz"
    dest: "{{ JAVA_BASE }}"
    owner: oracle
    group: oinstall
    mode: "0755"

- name: Create symlink for JDK
  ansible.builtin.file:
    src: "{{ JAVA_BASE }}/{{ jdk_version }}_{{ jdk_uversion }}"
    dest: "{{ JAVA_BASE }}/{{ jdk_version }}"
    state: link
    owner: oracle
    group: oinstall

- name: Update securerandom.source property
  ansible.builtin.lineinfile:
    path: "{{ JAVA_BASE }}/{{ jdk_version }}/jre/lib/security/java.security"
    regex: '^securerandom.source='
    line: 'securerandom.source=file:/dev/./urandom'
    backup: true

- name: Ensure dnf-automatic is running and enabled on boot
  ansible.builtin.service:
    name: dnf-automatic-install.timer
    state: started
    enabled: true

- name: Check if system needs reboot
  ansible.builtin.command: needs-restarting -r
  register: reboot_required
  changed_when: false
  failed_when: false
  tags:
    - rebootsystem

- name: Display reboot requirement status
  ansible.builtin.debug:
    msg: "System requires reboot: {{ 'Yes' if reboot_required.rc == 1 else 'No' }}"
  tags:
    - rebootsystem

- name: Reboot the server
  ansible.builtin.reboot:
    msg: "Rebooting server due to system updates"
    pre_reboot_delay: 5
    post_reboot_delay: 30
    reboot_timeout: 600
  when: reboot_required.rc == 1
  tags:
    - rebootsystem

- name: Check uptime of the servers
  ansible.builtin.command: uptime
  register: uptime_result
  changed_when: false

- name: Display server uptime
  ansible.builtin.debug:
    var: uptime_result.stdout
