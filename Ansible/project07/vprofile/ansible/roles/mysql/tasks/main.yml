---
- name: Install MariaDB server and Python MySQL client
  ansible.builtin.dnf:
    name:
      - mariadb-server
      - python3-PyMySQL
    state: present
  tags: ['install', 'mariadb']

- name: Start and enable MariaDB service
  ansible.builtin.systemd:
    name: mariadb
    state: started
    enabled: true
    daemon_reload: true
  tags: ['service', 'mariadb']

- name: Wait for MariaDB to be ready
  ansible.builtin.wait_for:
    port: 3306
    host: 127.0.0.1
    delay: 5
    timeout: 30
    state: started
  tags: ['mysql', 'wait']

- name: Secure MariaDB installation (MariaDB 10.4+)
  ansible.builtin.shell: |
    mysql --user=root <<_EOF_
    -- Set root password
    ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_password }}';

    -- Remove anonymous users
    DELETE FROM mysql.global_priv WHERE User='';

    -- Remove remote root users (keep only localhost, 127.0.0.1, ::1)
    DELETE FROM mysql.global_priv WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');

    -- Remove test database
    DROP DATABASE IF EXISTS test;
    DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';

    -- Reload privileges
    FLUSH PRIVILEGES;
    _EOF_
  args:
    creates: /root/.mysql_secured
  become: true
  register: mysql_secure_result
  tags: ['mysql', 'security']

- name: Display security setup result
  ansible.builtin.debug:
    var: mysql_secure_result
  when: mysql_secure_result is defined
  tags: ['mysql', 'debug']

- name: Mark MariaDB as secured
  ansible.builtin.file:
    path: /root/.mysql_secured
    state: touch
    mode: '0600'
  when: mysql_secure_result is succeeded
  tags: ['mysql', 'security']

- name: Create .my.cnf file for root user
  ansible.builtin.copy:
    dest: /root/.my.cnf
    content: |
      [client]
      user=root
      password={{ mysql_root_password }}

      [mysql]
      user=root
      password={{ mysql_root_password }}

      [mysqldump]
      user=root
      password={{ mysql_root_password }}
    owner: root
    group: root
    mode: '0600'
  tags: ['mysql', 'config']

- name: Test root authentication
  ansible.builtin.shell: |
    mysql -u root -p'{{ mysql_root_password }}' -e "SELECT VERSION() AS version;"
  register: auth_test
  changed_when: false
  tags: ['mysql', 'verify']

- name: Display authentication test result
  ansible.builtin.debug:
    msg: "MySQL authentication successful: {{ auth_test.stdout }}"
  tags: ['mysql', 'verify']

- name: Create 'accounts' database
  community.mysql.mysql_db:
    name: accounts
    state: present
  tags: ['mysql', 'database']

- name: Create 'admin' user
  community.mysql.mysql_user:
    name: admin
    password: "{{ mysql_user_password }}"
    priv: 'accounts.*:ALL'
    host: '%'
    state: present
  tags: ['mysql', 'user']

- name: Copy database dump file
  ansible.builtin.copy:
    src: db_backup.sql
    dest: /tmp/db_backup.sql
    mode: '0644'
  tags: ['mysql', 'database']

- name: Check if database is already populated
  ansible.builtin.shell: |
    TABLE_COUNT=$(mysql -u root -p'{{ mysql_root_password }}' accounts -e "SHOW TABLES;" 2>/dev/null | wc -l)
    echo $TABLE_COUNT
  register: table_count_check
  changed_when: false
  tags: ['mysql', 'database']

- name: Import database if empty
  ansible.builtin.shell: |
    mysql -u root -p'{{ mysql_root_password }}' accounts < /tmp/db_backup.sql
  when: table_count_check.stdout | int == 0
  register: import_result
  tags: ['mysql', 'database']

- name: Display import result
  ansible.builtin.debug:
    msg: "Database imported successfully"
  when: import_result is succeeded and import_result is changed
  tags: ['mysql', 'database']

# - name: Configure firewall for MySQL
#   ansible.posix.firewalld:
#     port: 3306/tcp
#     permanent: true
#     state: enabled
#     immediate: true
#   tags: ['firewall', 'mysql']

- name: Clean up temporary files
  ansible.builtin.file:
    path: /tmp/db_backup.sql
    state: absent
  tags: ['mysql', 'cleanup']
