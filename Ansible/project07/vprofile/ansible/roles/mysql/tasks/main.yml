- name: Install MariaDB server and Python MySQL client
  ansible.builtin.dnf:
    name:
      - mariadb-server
      - python3-PyMySQL
    state: present

- name: Start and enable MariaDB service
  ansible.builtin.service:
    name: mariadb
    state: started
    enabled: true

- name: Check if root password is set
  ansible.builtin.command: mysqladmin -u root status
  register: mysql_root_check
  changed_when: false
  failed_when: false
  check_mode: false

- name: Set MariaDB root password for the first time
  community.mysql.mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
  when: mysql_root_check.rc != 0
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Update MariaDB root password for localhost
  community.mysql.mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_password }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    check_implicit_admin: true
    state: present
  when: mysql_root_check.rc == 0
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Create vprofile database
  community.mysql.mysql_db:
    name: accounts
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create vprofile user
  community.mysql.mysql_user:
    name: admin
    password: "{{ mysql_user_password }}"
    priv: 'accounts.*:ALL'
    host: '%'
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Copy database dump file
  ansible.builtin.copy:
    src: db_backup.sql
    dest: /tmp/db_backup.sql

- name: Check if database is already populated
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    database: accounts
    query: SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'accounts'
  register: db_check

- name: Restore database
  community.mysql.mysql_db:
    name: accounts
    state: import
    target: /tmp/db_backup.sql
    login_user: root
    login_password: "{{ mysql_root_password }}"
  when: db_check.query_result[0][0] == 0

- name: Configure firewall for MySQL
  ansible.posix.firewalld:
    port: 3306/tcp
    permanent: true
    state: enabled
  notify: Reload firewall