#!/bin/bash
set -e

##############################################################################
# WebLogic 14c SystemD-Compatible Stop Script
# Generated by Ansible
##############################################################################

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [WEBLOGIC-STOP] $1" >&2
    logger -t weblogic-{{ weblogic_domain_name }} "$1"
}

log_message "SystemD stop script initiated"

DOMAIN_HOME="{{ domain_home }}"
PID_FILE="${DOMAIN_HOME}/AdminServer.pid"

if [ -f "${PID_FILE}" ]; then
    PID=$(cat "${PID_FILE}")
    log_message "Found PID file with PID: ${PID}"
    
    if kill -0 ${PID} 2>/dev/null; then
        log_message "Sending TERM signal to WebLogic (PID: ${PID})"
        kill -TERM ${PID}
        
        # Wait for graceful shutdown (up to 2 minutes)
        for i in {1..120}; do
            if ! kill -0 ${PID} 2>/dev/null; then
                log_message "WebLogic stopped gracefully after ${i} seconds"
                rm -f "${PID_FILE}"
                exit 0
            fi
            sleep 1
        done
        
        log_message "Graceful shutdown timeout, forcing stop"
        kill -KILL ${PID} 2>/dev/null || true
        rm -f "${PID_FILE}"
        log_message "WebLogic force-stopped"
    else
        log_message "Process ${PID} not running, removing stale PID file"
        rm -f "${PID_FILE}"
    fi
else
    log_message "No PID file found, attempting cleanup"
    # Kill any WebLogic processes as fallback
    if pgrep -f "weblogic.Server" >/dev/null; then
        log_message "Killing orphaned WebLogic processes"
        pkill -TERM -f "weblogic.Server" || true
        sleep 5
        pkill -KILL -f "weblogic.Server" 2>/dev/null || true
    fi
fi

log_message "SystemD stop script completed"
exit 0
