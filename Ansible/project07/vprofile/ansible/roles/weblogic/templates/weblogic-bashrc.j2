#!/bin/bash
# ==================================================================================
# WebLogic Management .bashrc Profile
# ==================================================================================
# Generated by Ansible for Oracle WebLogic Server Management
# User: {{ weblogic_user }}
# Domain: {{ weblogic_domain_name }}
# Generated on: {{ ansible_date_time.iso8601 }}
# ==================================================================================

# ==================================================================================
# COLOR DEFINITIONS
# ==================================================================================
export RESET="\033[0m"
export BOLD="\033[1m"
export DIM="\033[2m"
export UNDERLINE="\033[4m"
export BLINK="\033[5m"
export REVERSE="\033[7m"
export HIDDEN="\033[8m"

# Regular Colors
export BLACK="\033[0;30m"
export RED="\033[0;31m"
export GREEN="\033[0;32m"
export YELLOW="\033[0;33m"
export BLUE="\033[0;34m"
export MAGENTA="\033[0;35m"
export CYAN="\033[0;36m"
export WHITE="\033[0;37m"

# Bold Colors
export BRED="\033[1;31m"
export BGREEN="\033[1;32m"
export BYELLOW="\033[1;33m"
export BBLUE="\033[1;34m"
export BMAGENTA="\033[1;35m"
export BCYAN="\033[1;36m"
export BWHITE="\033[1;37m"

# Background Colors
export BG_BLACK="\033[40m"
export BG_RED="\033[41m"
export BG_GREEN="\033[42m"
export BG_YELLOW="\033[43m"
export BG_BLUE="\033[44m"
export BG_MAGENTA="\033[45m"
export BG_CYAN="\033[46m"
export BG_WHITE="\033[47m"

# ==================================================================================
# WEBLOGIC ENVIRONMENT VARIABLES (Templated)
# ==================================================================================
export ORACLE_BASE="{{ oracle_base }}"
export ORACLE_HOME="{{ oracle_home }}"
export MW_HOME="{{ middleware_home }}"
export WLS_HOME="{{ wls_home }}"
export WL_HOME="{{ wl_home }}"
export JAVA_HOME="{{ java_home }}"
export DOMAIN_BASE="{{ domain_base }}"
export DOMAIN_HOME="{{ domain_home }}"
export NODEMGR_HOME="{{ nodemgr_home }}"
export LOG_BASE="{{ log_base }}"

# Path Configuration
export PATH="${JAVA_HOME}/bin:${WLS_HOME}/server/bin:${DOMAIN_HOME}/bin:${PATH}"
export CLASSPATH="${WLS_HOME}/server/lib/weblogic.jar:${CLASSPATH}"

# ==================================================================================
# CUSTOM PROMPT WITH WEBLOGIC STATUS
# ==================================================================================
function weblogic_status_prompt() {
    local status="UNKNOWN"
    local color="${RED}"
    
    if systemctl is-active --quiet weblogic-{{ weblogic_domain_name }}.service 2>/dev/null; then
        if ss -tlnp 2>/dev/null | grep -q ":{{ weblogic_admin_port }}.*java"; then
            status="RUNNING"
            color="${GREEN}"
        else
            status="STARTING"
            color="${YELLOW}"
        fi
    else
        status="STOPPED"
        color="${RED}"
    fi
    
    echo -e "${color}[WLS:${status}]${RESET}"
}

# Custom PS1 with WebLogic status
export PS1="\n${BCYAN}‚ï≠‚îÄ${RESET} ${BGREEN}\u${RESET}@${BBLUE}\h${RESET} ${BYELLOW}\w${RESET} $(weblogic_status_prompt)\n${BCYAN}‚ï∞‚îÄ${RESET} ${BWHITE}\$${RESET} "

# ==================================================================================
# ASCII ART WELCOME MESSAGE
# ==================================================================================
function weblogic_welcome() {
    clear
    echo -e "${BCYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                              ‚ïë
‚ïë  ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó            ‚ïë
‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù            ‚ïë
‚ïë  ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë                 ‚ïë
‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë                 ‚ïë
‚ïë  ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó            ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù            ‚ïë
‚ïë                                                                              ‚ïë
‚ïë           ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ïë
‚ïë           ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ïë
‚ïë           ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïë
‚ïë           ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ïë
‚ïë           ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ïë
‚ïë           ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${RESET}"
    
    echo -e "${BGREEN}üöÄ Welcome to WebLogic Management Console${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${YELLOW}üìÖ Date: ${RESET}$(date '+%A, %B %d, %Y at %I:%M %p')"
    echo -e "${YELLOW}üë§ User: ${RESET}${USER}"
    echo -e "${YELLOW}üñ•Ô∏è  Host: ${RESET}$(hostname)"
    echo -e "${YELLOW}üìÅ Domain: ${RESET}{{ weblogic_domain_name }}"
    echo -e "${YELLOW}üè† Domain Home: ${RESET}{{ domain_home }}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    
    # WebLogic Status Check
    echo -e "${BOLD}üìä WebLogic Server Status:${RESET}"
    wls_status
    echo ""
    
    echo -e "${BMAGENTA}üí° Type 'wls_help' for available commands${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo ""
}

# ==================================================================================
# WEBLOGIC MANAGEMENT FUNCTIONS (Templated)
# ==================================================================================

# WebLogic Service Management
function wls_start() {
    echo -e "${BGREEN}üöÄ Starting WebLogic AdminServer ({{ weblogic_domain_name }})...${RESET}"
    {{ domain_home }}/bin/daemon-stop.sh
    echo -e "${YELLOW}‚è≥ Waiting for startup to complete...${RESET}"
    sleep 10
    wls_status
}

function wls_stop() {
    echo -e "${BRED}üõë Stopping WebLogic AdminServer ({{ weblogic_domain_name }})...${RESET}"
    
    # Method 1: Use the daemon stop script if it exists
    if [ -f "{{ domain_home }}/bin/daemon-stop.sh" ]; then
        echo -e "${YELLOW}‚è≥ Using daemon stop script...${RESET}"
        {{ domain_home }}/bin/daemon-stop.sh
    else
        # Method 2: Stop using PID file
        if [ -f "{{ domain_home }}/AdminServer.pid" ]; then
            local pid=$(cat {{ domain_home }}/AdminServer.pid)
            echo -e "${YELLOW}‚è≥ Stopping WebLogic PID: ${pid}...${RESET}"
            
            if kill -0 ${pid} 2>/dev/null; then
                kill -TERM ${pid}
                
                # Wait for graceful shutdown
                local count=0
                while [ $count -lt 60 ]; do
                    if ! kill -0 ${pid} 2>/dev/null; then
                        echo -e "${GREEN}‚úÖ WebLogic stopped gracefully${RESET}"
                        rm -f {{ domain_home }}/AdminServer.pid
                        sleep 3
                        wls_status
                        return 0
                    fi
                    sleep 2
                    ((count++))
                done
                
                # Force kill if graceful shutdown failed
                echo -e "${YELLOW}‚ö†Ô∏è  Graceful shutdown timeout, forcing stop...${RESET}"
                kill -KILL ${pid} 2>/dev/null || true
                rm -f {{ domain_home }}/AdminServer.pid
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Process ${pid} not running, removing stale PID file${RESET}"
                rm -f {{ domain_home }}/AdminServer.pid
            fi
        else
            # Method 3: Kill all WebLogic processes
            echo -e "${YELLOW}‚ö†Ô∏è  No PID file found, killing all WebLogic processes...${RESET}"
            pkill -TERM -f "weblogic.Server" || true
            sleep 5
            pkill -KILL -f "weblogic.Server" 2>/dev/null || true
        fi
    fi
    
    echo -e "${YELLOW}‚è≥ Waiting for shutdown to complete...${RESET}"
    sleep 5
    wls_status
}

function wls_restart() {
    echo -e "${BYELLOW}üîÑ Restarting WebLogic AdminServer ({{ weblogic_domain_name }})...${RESET}"
    wls_stop
    
    # Wait a bit longer between stop and start
    echo -e "${YELLOW}‚è≥ Waiting for clean shutdown...${RESET}"
    sleep 10
    
    wls_start
}

function wls_status() {
    echo -e "${BOLD}üìä WebLogic Server Status Report${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    
    # SystemD Service Status
    if systemctl is-active --quiet weblogic-{{ weblogic_domain_name }}.service 2>/dev/null; then
        echo -e "${GREEN}‚úÖ SystemD Service: ${BOLD}ACTIVE${RESET}"
    else
        echo -e "${YELLOW}‚ÑπÔ∏è  SystemD Service: ${BOLD}INACTIVE (Running via direct script)${RESET}"
    fi
    
    # Process Status
    local java_processes=$(ps aux | grep "weblogic.Server" | grep -v grep | wc -l)
    if [ $java_processes -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Java Process: ${BOLD}RUNNING (${java_processes} processes)${RESET}"
        echo -e "${DIM}   PID: $(pgrep -f weblogic.Server | tr '\n' ' ')${RESET}"
    else
        echo -e "${RED}‚ùå Java Process: ${BOLD}NOT RUNNING${RESET}"
    fi
    
    # Admin Port Status with Fixed URL Display
    if ss -lntp 2>/dev/null | grep -q ":{{ weblogic_admin_port }}.*java"; then
        echo -e "${GREEN}‚úÖ Admin Port {{ weblogic_admin_port }}: ${BOLD}LISTENING${RESET}"
        
        # Get primary network IP address
        local primary_ip=$(hostname -I | awk '{print $1}')
        if [ ! -z "$primary_ip" ]; then
            echo -e "${GREEN}üåê Console URL: ${BOLD}http://${primary_ip}:{{ weblogic_admin_port }}/console${RESET}"
        fi
    else
        echo -e "${RED}‚ùå Admin Port {{ weblogic_admin_port }}: ${BOLD}NOT LISTENING${RESET}"
    fi
    
    # SSL Port Status with Fixed URL Display
    if ss -lntp 2>/dev/null | grep -q ":{{ weblogic_admin_ssl_port }}.*java"; then
        echo -e "${GREEN}‚úÖ SSL Port {{ weblogic_admin_ssl_port }}: ${BOLD}LISTENING${RESET}"
        
        # Get primary network IP address  
        local primary_ip=$(hostname -I | awk '{print $1}')
        if [ ! -z "$primary_ip" ]; then
            echo -e "${GREEN}üîí SSL Console URL: ${BOLD}https://${primary_ip}:{{ weblogic_admin_ssl_port }}/console${RESET}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  SSL Port {{ weblogic_admin_ssl_port }}: ${BOLD}NOT LISTENING${RESET}"
    fi
    
    # Server State from Logs
    if [ -f "{{ domain_home }}/servers/AdminServer/logs/AdminServer.log" ]; then
        local last_state=$(grep "Server state changed to" "{{ domain_home }}/servers/AdminServer/logs/AdminServer.log" | tail -1 | awk -F'Server state changed to ' '{print $2}' | sed 's/\.//')
        if [ ! -z "$last_state" ]; then
            if [[ "$last_state" == "RUNNING" ]]; then
                echo -e "${GREEN}‚úÖ Server State: ${BOLD}${last_state}${RESET}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Server State: ${BOLD}${last_state}${RESET}"
            fi
        fi
    fi
    
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
}

function wls_logs() {
    local log_type="${1:-server}"
    echo -e "${BCYAN}üìã WebLogic Logs${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    
    case "$log_type" in
        "server"|"s")
            echo -e "${YELLOW}üìÑ AdminServer Log (press Ctrl+C to exit):${RESET}"
            tail -f "{{ domain_home }}/servers/AdminServer/logs/AdminServer.log"
            ;;
        "domain"|"d")
            echo -e "${YELLOW}üìÑ Domain Log (press Ctrl+C to exit):${RESET}"
            tail -f "{{ domain_home }}/servers/AdminServer/logs/{{ weblogic_domain_name }}.log"
            ;;
        "access"|"a")
            echo -e "${YELLOW}üìÑ Access Log (press Ctrl+C to exit):${RESET}"
            tail -f "{{ domain_home }}/servers/AdminServer/logs/access.log"
            ;;
        "systemd"|"sys")
            echo -e "${YELLOW}üìÑ SystemD Log (press Ctrl+C to exit):${RESET}"
            journalctl -u weblogic-{{ weblogic_domain_name }}.service -f
            ;;
        *)
            echo -e "${RED}‚ùå Invalid log type. Available options:${RESET}"
            echo -e "  ${CYAN}server|s${RESET}   - AdminServer log"
            echo -e "  ${CYAN}domain|d${RESET}   - Domain log"
            echo -e "  ${CYAN}access|a${RESET}   - Access log"
            echo -e "  ${CYAN}systemd|sys${RESET} - SystemD service log"
            ;;
    esac
}

function wls_console() {
    local primary_ip=$(hostname -I | awk '{print $1}')
    
    if [ ! -z "$primary_ip" ]; then
        echo -e "${BGREEN}üåê Opening WebLogic Console...${RESET}"
        echo -e "${YELLOW}URL: ${BOLD}http://${primary_ip}:{{ weblogic_admin_port }}/console${RESET}"
        echo -e "${YELLOW}Username: ${BOLD}{{ weblogic_admin_username }}${RESET}"
        
        if command -v firefox >/dev/null 2>&1; then
            firefox "http://${primary_ip}:{{ weblogic_admin_port }}/console" &
        elif command -v google-chrome >/dev/null 2>&1; then
            google-chrome "http://${primary_ip}:{{ weblogic_admin_port }}/console" &
        else
            echo -e "${CYAN}üí° Copy the URL above to your browser${RESET}"
        fi
    else
        echo -e "${RED}‚ùå Could not determine IP address${RESET}"
    fi
}

function wls_ports() {
    echo -e "${BCYAN}üîå WebLogic Network Ports${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${BOLD}Active Java Network Connections:${RESET}"
    
    # Use netstat for better compatibility if ss parsing is problematic
    if command -v netstat >/dev/null 2>&1; then
        netstat -tlnp 2>/dev/null | grep java | while read line; do
            local address=$(echo $line | awk '{print $4}')
            local port=$(echo $address | awk -F':' '{print $NF}')
            local ip=$(echo $address | awk -F':' '{print $(NF-1)}' | sed 's/.*\.//')
            
            # Clean up the IP address display
            if [[ "$address" =~ ^[0-9.]+:[0-9]+$ ]]; then
                ip=$(echo $address | cut -d':' -f1)
            elif [[ "$address" =~ :::[0-9]+$ ]]; then
                ip="0.0.0.0"
            else
                ip=$(hostname -I | awk '{print $1}')
            fi
            
            case "$port" in
                "{{ weblogic_admin_port }}") 
                    echo -e "${GREEN}  üì° Port ${port}: Admin Console - ${ip}:${port}${RESET}" ;;
                "{{ weblogic_admin_ssl_port }}") 
                    echo -e "${BLUE}  üîí Port ${port}: SSL Admin Console - ${ip}:${port}${RESET}" ;;
                "{{ weblogic_managed_server_port | default('8001') }}") 
                    echo -e "${MAGENTA}  üñ•Ô∏è  Port ${port}: Managed Server - ${ip}:${port}${RESET}" ;;
                *) 
                    echo -e "${YELLOW}  üîå Port ${port}: Other Service - ${ip}:${port}${RESET}" ;;
            esac
        done
    else
        # Fallback to ss with better parsing
        ss -lntp 2>/dev/null | grep java | while read line; do
            local full_address=$(echo $line | awk '{print $4}')
            local port=$(echo $full_address | awk -F':' '{print $NF}')
            
            case "$port" in
                "{{ weblogic_admin_port }}") 
                    echo -e "${GREEN}  üì° Port ${port}: Admin Console${RESET}" ;;
                "{{ weblogic_admin_ssl_port }}") 
                    echo -e "${BLUE}  üîí Port ${port}: SSL Admin Console${RESET}" ;;
                "{{ weblogic_managed_server_port | default('8001') }}") 
                    echo -e "${MAGENTA}  üñ•Ô∏è  Port ${port}: Managed Server${RESET}" ;;
                *) 
                    echo -e "${YELLOW}  üîå Port ${port}: Other Service${RESET}" ;;
            esac
        done
    fi
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
}



function wls_config() {
    echo -e "${BCYAN}‚öôÔ∏è  WebLogic Configuration${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${BOLD}Environment Variables:${RESET}"
    echo -e "${GREEN}  ORACLE_BASE: ${RESET}{{ oracle_base }}"
    echo -e "${GREEN}  ORACLE_HOME: ${RESET}{{ oracle_home }}"
    echo -e "${GREEN}  MW_HOME: ${RESET}{{ middleware_home }}"
    echo -e "${GREEN}  WLS_HOME: ${RESET}{{ wls_home }}"
    echo -e "${GREEN}  JAVA_HOME: ${RESET}{{ java_home }}"
    echo -e "${GREEN}  DOMAIN_HOME: ${RESET}{{ domain_home }}"
    echo -e "${GREEN}  LOG_BASE: ${RESET}{{ log_base }}"
    
    echo -e "\n${BOLD}Java Version:${RESET}"
    java -version 2>&1 | head -1 | sed "s/^/  ${GREEN}/"
    echo -e "${RESET}"
    
    echo -e "${BOLD}Domain Configuration:${RESET}"
    echo -e "${GREEN}  Domain Name: ${RESET}{{ weblogic_domain_name }}"
    echo -e "${GREEN}  Admin Port: ${RESET}{{ weblogic_admin_port }}"
    echo -e "${GREEN}  SSL Port: ${RESET}{{ weblogic_admin_ssl_port }}"
    echo -e "${GREEN}  Managed Server Port: ${RESET}{{ weblogic_managed_server_port | default('8001') }}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
}

function wls_backup() {
    local backup_dir="{{ oracle_base }}/backups/weblogic/$(date +%Y%m%d_%H%M%S)"
    echo -e "${BCYAN}üíæ Creating WebLogic Backup${RESET}"
    echo -e "${YELLOW}Backup location: ${backup_dir}${RESET}"
    
    mkdir -p "$backup_dir"
    
    echo -e "${YELLOW}üìÅ Backing up domain configuration...${RESET}"
    cp -r "{{ domain_home }}/config" "$backup_dir/"
    
    echo -e "${YELLOW}üîê Backing up security files...${RESET}"
    cp -r "{{ domain_home }}/security" "$backup_dir/" 2>/dev/null || true
    
    echo -e "${YELLOW}üìä Backing up server logs...${RESET}"
    cp -r "{{ domain_home }}/servers/AdminServer/logs" "$backup_dir/" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Backup completed: ${backup_dir}${RESET}"
}

# [Additional functions continue with the same templating approach...]

function wls_help() {
    echo -e "${BCYAN}üìö WebLogic Management Commands${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${BOLD}Domain: ${BGREEN}{{ weblogic_domain_name }}${RESET} | ${BOLD}Admin Port: ${BGREEN}{{ weblogic_admin_port }}${RESET}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${BOLD}üöÄ SERVICE MANAGEMENT:${RESET}"
    echo -e "  ${BGREEN}wls_start${RESET}      - Start WebLogic AdminServer"
    echo -e "  ${BRED}wls_stop${RESET}       - Stop WebLogic AdminServer"
    echo -e "  ${BYELLOW}wls_restart${RESET}    - Restart WebLogic AdminServer"
    echo -e "  ${BCYAN}wls_status${RESET}     - Show detailed server status"
    echo ""
    echo -e "${BOLD}üìä MONITORING & DIAGNOSTICS:${RESET}"
    echo -e "  ${BMAGENTA}wls_logs${RESET} [type] - View logs (server|domain|access|systemd)"
    echo -e "  ${BMAGENTA}wls_ports${RESET}      - Show active network ports"
    echo -e "  ${BMAGENTA}wls_processes${RESET}  - Show Java processes"
    echo -e "  ${BMAGENTA}wls_health${RESET}     - Comprehensive health check"
    echo ""
    echo -e "${BOLD}‚öôÔ∏è  CONFIGURATION & MANAGEMENT:${RESET}"
    echo -e "  ${BBLUE}wls_config${RESET}     - Show configuration summary"
    echo -e "  ${BBLUE}wls_console${RESET}    - Open admin console in browser"
    echo -e "  ${BBLUE}wls_backup${RESET}     - Create configuration backup"
    echo ""
    echo -e "${BOLD}üé® SYSTEM:${RESET}"
    echo -e "  ${BWHITE}wls_welcome${RESET}    - Show welcome screen"
    echo -e "  ${BWHITE}wls_help${RESET}       - Show this help message"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
    echo -e "${DIM}üí° Tip: All commands are color-coded and provide detailed output${RESET}"
}

# ==================================================================================
# USEFUL ALIASES
# ==================================================================================
alias ll='ls -alF --color=auto'
alias la='ls -A --color=auto'
alias l='ls -CF --color=auto'
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# WebLogic specific aliases
alias wl='wls_status'
alias wlogs='wls_logs server'
alias wstart='wls_start'
alias wstop='wls_stop'
alias wrestart='wls_restart'
alias wconsole='wls_console'
alias wconfig='wls_config'
alias whealth='wls_health'

# Navigation aliases
alias cddomain='cd {{ domain_home }}'
alias cdlogs='cd {{ domain_home }}/servers/AdminServer/logs'
alias cdbin='cd {{ domain_home }}/bin'
alias cdconfig='cd {{ domain_home }}/config'

# System monitoring
alias ports='ss -tlnp'
alias processes='ps aux | grep -i weblogic'
alias diskspace='df -h'
alias meminfo='free -h'

# ==================================================================================
# BASH COMPLETION AND HISTORY
# ==================================================================================
# Enable bash completion
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# History configuration
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTCONTROL=ignoredups:ignorespace
shopt -s histappend
shopt -s checkwinsize

# ==================================================================================
# INITIALIZATION
# ==================================================================================
# Show welcome screen on login (comment out if you don't want this)
if [[ $- == *i* ]] && [[ $0 == *bash* ]] && [[ "${WEBLOGIC_WELCOME_SHOWN:-}" != "1" ]]; then
    export WEBLOGIC_WELCOME_SHOWN=1
    weblogic_welcome
fi

# ==================================================================================
# END OF WEBLOGIC MANAGEMENT .bashrc
# ==================================================================================
