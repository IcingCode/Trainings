- name: Perform full patching
  ansible.builtin.package:
    name: '*'
    state: latest

- name: Install needed applications using vars.
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - vim
      - zsh
      - git
      - rsyslog
      - yum-utils
      - bash-completion
      - net-tools
      - perl
      - elfutils-libelf-devel
      - tar
      - bzip2
      - bind-utils
      - firewalld
      - dnf-automatic
      - epel-release
      - wget
      - binutils
      - gcc
      - gcc-c++
      - glibc
      - glibc-devel
      - libaio
      - libaio-devel
      - libgcc
      - libstdc++
      - libstdc++-devel
      - libnsl
      - ksh
      - sysstat
      - numactl
      - numactl-devel
      - motif
      - motif-devel
      - redhat-lsb
      - redhat-lsb-core
      - openssl
      - make 
      - xorg-x11-server-utils
      - xorg-x11-xauth
      - xterm
    ignore_errors: true
# User and groups tasks   
- name: Create oinstall group
  group:
    name: oinstall
    gid: 105
    state: present

- name: Add user oracle
  ansible.builtin.user:
    name: oracle
    shell: /bin/bash
    uid: 201
    groups: oinstall
    expires: -1
    home: /home/oracle
    password: $6$28HZxmElEYp37PJD$xNvhxWcMsvFoikTEgQw139A/LZVi.8.Dg3utZrlHbbtTnkYKrk0GmMcwsCqBtwsP/FeKJm9CrWj6OCYEIE3Xs0
    create_home: true
    state: present

- name: Add user vagrant
  ansible.builtin.user:
    name: vagrant
    shell: /usr/bin/zsh
    home: /home/vagrant
    password: $6$dOoodFWPv/eaWxVL$s7SQ0.EIbKIUuNs0d1H6K4OwLbob3KeK3PuYgpRF3aTY7GnpaMRlU0X5kG1IWTbhyhrgsHXpRx98OCnF6H7/H0
    create_home: true
    state: present

- name: Add sudoer rule for ansible user
  ansible.builtin.copy:
    dest: /etc/sudoers.d/vagrant
    src: etc/sudoers.d/vagrant
    owner: root
    group: root
    mode: 0440
    validate: /usr/sbin/visudo -csf %s

- name: Check if .zshrc exists
  stat:
    path: /home/vagrant/.zshrc
  register: zshrc_result

- name: Check if .oh-my-zsh exists
  stat:
    path: /home/vagrant/.oh-my-zsh
  register: oh_my_zsh_result

- name: Cloning oh-my-zsh
  git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: /home/vagrant/.oh-my-zsh
  when: not oh_my_zsh_result.stat.exists

- name: Set Correct ownwership and permission to .oh-my-zsh
  ansible.builtin.file:
    path: /home/vagrant/.oh-my-zsh
    owner: vagrant
    group: vagrant
    mode: 0755
    recurse: true

- name: Copy .zshrc to home folder
  ansible.builtin.copy:
    dest: /home/vagrant/.zshrc
    src: .zshrc
    owner: vagrant
    group: vagrant
    mode: 0440

- name: Check if zsh-autosuggestions exists
  stat:
    path: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  register: stat_zsh_autosuggestions_result

- name: Clone zsh-autosuggestions github repository
  git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    clone: true
    update: true
    force: true
  when: not stat_zsh_autosuggestions_result.stat.exists

- name: Set Correct ownwership and permission to zsh-autosuggestions
  ansible.builtin.file:
    path: /home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    owner: vagrant
    group: vagrant
    mode: 0755
    recurse: true

- name: Set Shell to zsh
  user:
    name: vagrant
    shell: /usr/bin/zsh

- name: Set a message of the day
  ansible.builtin.template:
    dest: /etc/motd
    src: templates/motd.j2
    owner: root
    group: root
    mode: 0644

- name: Set a login banner
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: etc/issue
    owner: root
    group: root
    mode: 0644
  with_items:
    - /etc/issue.net

- name: Make sure rsyslog is started and enabled
  ansible.builtin.service:
    name: rsyslog
    state: started
    enabled: true

# Directory Tasks
- name: Create /home/oracle/dba if it does not exist
  ansible.builtin.file:
    path: /home/oracle/dba
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall

- name: Create /home/oracle/log if it does not exist
  ansible.builtin.file:
    path: /home/oracle/log
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall

- name: Create /u01 if it does not exist
  ansible.builtin.file:
    path: /u01
    state: directory
    mode: '0755'
    owner: root
    group: oinstall

- name: Create $LOG_BASE (/u01/logs) if it does not exist
  ansible.builtin.file:
    path: /u01/logs
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall

- name: Create $ORACLE_BASE (/u01/app/oracle) if it does not exist
  ansible.builtin.file:
    path: /u01/app/oracle
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall

- name: Create $ORACLE_HOME(/u01/app/oracle/product/{{ oracle_version }}/fmw) if it does not exist
  ansible.builtin.file:
    path: '/u01/app/oracle/product/{{ oracle_version }}/fmw'
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall

- name: Create $JAVA_BASE (/u01/app/oracle/product/{{ oracle_version }}/fmwjava) if it does not exist
  ansible.builtin.file:
    path: /u01/app/oracle/product/{{ oracle_version }}/fmwjava/
    state: directory
    mode: '0755'
    owner: oracle
    group: oinstall
# Create file structure
- name: Copy .bash_profile file
  template:
    src: templates/bash_profile.j2
    dest: /home/oracle/.bash_profile
    owner: oracle
    group: oracle
    mode: '0644'
- name: Copy .bashrc file
  template:
    src: templates/bashrc.j2
    dest: /home/oracle/.bashrc
    owner: oracle
    group: oracle
    mode: '0644'
- name: Create /etc/oraInst.loc
  lineinfile:
    path: /etc/oraInst.loc
    line: "inventory_loc=/u01/app/oracle/oraInventory"
    create: yes
    owner: oracle
    group: oracle
    mode: '0644'

- name: Add inst_group to /etc/oraInst.loc
  lineinfile:
    path: /etc/oraInst.loc
    line: "inst_group=oinstall"
    insertafter: "inventory_loc=/u01/app/oracle/oraInventory"
    create: no
    owner: oracle
    group: oinstall
    mode: '0644'

# - name: Generate /etc/oraInst.loc
#   template:
#     src: oraInst.loc.j2
#     dest: /etc/oraInst.loc
#     owner: oracle
#     group: oinstall
#     mode: '0644'
- name: Copy 99-oracle.conf to /etc/security/limits.d
  ansible.builtin.copy:
    dest: /etc/security/limits.d/99-oracle.conf
    src: files/etc/security/limits.d/99-oracle.conf
    owner: root
    group: root
    mode: 0640
# Update sysctl settings
- name: Update sysctl.conf file
  lineinfile:
    dest: /etc/sysctl.conf
    state: present
    line: "{{ item }}"
  with_items:
    - "net.core.rmem_max=2097152"
    - "net.core.wmem_max=2097152"
  notify: restart_sysctl

- name: Ensure dnf-automatic is running and enabled on boot.
  ansible.builtin.service:
    name: dnf-automatic-install.timer
    state: started
    enabled: yes

- name: Check to see if we need a reboot
  command: needs-restarting -r
  register: result
  ignore_errors: true

- name: Display result
  debug:
    var: result.rc

- name: Reboot the server
  tags: reboot
  become_user: root
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: result.rc == 1

- name: Wait for the reboot to complete if there was a change.
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 300
  when: result.rc == 1

- name: Check the Uptime of the servers
  shell: "uptime"
  register: Uptime

- debug: var=Uptime
