- name: Perform full patching
  ansible.builtin.apt:
    update_cache: true
    upgrade: safe

- name: Install needed applications using vars
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - vim
      - git
      - zsh
      - ufw
      - debian-goodies
      - unattended-upgrades
      - fail2ban
      - ca-certificates
      - curl
      - gnupg2
      - lsb-release
  ignore_errors: true

# - name: Add group tux if it does not exists
#   ansible.builtin.group:
#     name: tux
#     state: present

- name: Add user tux
  ansible.builtin.user:
    name: tux
    shell: /usr/bin/zsh
    home: /home/tux
    password: $6$oQMlAFgXYClmZ9NW$sRr0g6b80TuSbD1nU3EgaOak2Mtb7Opg3v40OVivIdoCK4Ig5dR7VPazopuQCgIXo7lOWGaVD4egX8orMBziH0
    create_home: true
    state: present

- name: Add SSH public key for user tux
  ansible.posix.authorized_key:
    user: tux
    key: "{{ lookup('file', '/home/tux/.ssh/rsa.pub') }}"
    state: present

- name: Add sudoer rule for ansible user
  ansible.builtin.copy:
    dest: /etc/sudoers.d/tux
    src: etc/sudoers.d/tux
    owner: root
    group: root
    mode: "0440"
    validate: /usr/sbin/visudo -csf %s

- name: Check if .zshrc exists
  ansible.builtin.stat:
    path: /home/tux/.zshrc
  register: stat_rc_result

- name: Check if .oh-my-zsh exists
  ansible.builtin.stat:
    path: /home/tux/.oh-my-zsh
  register: stat_oh_my_zsh_result

- name: Cloning oh-my-zsh
  ansible.builtin.git:
    repo: https://github.com/robbyrussell/oh-my-zsh
    dest: /home/tux/.oh-my-zsh
  when: not stat_oh_my_zsh_result.stat.exists

- name: Set Correct ownwership and permission to .oh-my-zsh
  ansible.builtin.file:
    path: /home/tux/.oh-my-zsh
    owner: tux
    group: tux
    mode: 0755
    recurse: true
  when: stat_oh_my_zsh_result.stat.exists

- name: Copy .zshrc to home folder
  ansible.builtin.copy:
    dest: /home/tux/.zshrc
    src: .zshrc
    owner: tux
    group: tux
    mode: "0440"

- name: Check if zsh-autosuggestions exists
  ansible.builtin.stat:
    path: /home/tux/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  register: stat_zsh_autosuggestions_result

- name: Clone zsh-autosuggestions github repository
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: /home/tux/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    clone: true
    update: true
    force: true
  when: not stat_zsh_autosuggestions_result.stat.exists

- name: Set Correct ownwership and permission to zsh-autosuggestions
  ansible.builtin.file:
    path: /home/tux/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    owner: tux
    group: tux
    mode: 0755
    recurse: true
  when: stat_zsh_autosuggestions_result.stat.exists

- name: Set Shell to zsh
  ansible.builtin.user:
    name: tux
    shell: /usr/bin/zsh

- name: Add hardened SSH config
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_config
    src: etc/ssh/debian/sshd_config
    owner: root
    group: root
    mode: 0600


- name: Restart ssh
  ansible.builtin.service:
    name: ssh
    state: restarted

- name: Set a message of the day
  ansible.builtin.copy:
    dest: /etc/motd
    src: etc/motd
    owner: root
    group: root
    mode: 0644

- name: Set a login banner
  ansible.builtin.copy:
    dest: "{{ item }}"
    src: etc/issue
    owner: root
    group: root
    mode: 0644
  with_items:
    - /etc/issue.net


- name: Start and enable Firewall Service
  ansible.builtin.service:
    name: "{{ firewall_pkg_debian }}"
    enabled: true
    state: started

- name: Allow TCP ports through firewall
  community.general.ufw:
    state: enabled
    policy: deny
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "22"
  when: ansible_distribution == "Ubuntu"

- name: Ensure fail2ban is running and enabled on boot
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: yes

# Create a copy of the default configuration file
- name: Create a copy of the default configuration file
  ansible.builtin.copy:
    src: /etc/fail2ban/jail.conf
    remote_src: true
    dest: /etc/fail2ban/jail.local

# Configure the jail settings
- name: Configure the jail ban time
  ini_file:
    path: /etc/fail2ban/jail.local
    section: DEFAULT
    option: bantime
    value: 86400
- name: Configure the jail's findtime
  ini_file:
    path: /etc/fail2ban/jail.local
    section: DEFAULT
    option: findtime
    value: 5m
- name: Configure the jail's maxretry
  ini_file:
    path: /etc/fail2ban/jail.local
    section: DEFAULT
    option: maxretry
    value: 3
- name: Configure the jail's backend
  ini_file:
    path: /etc/fail2ban/jail.local
    section: DEFAULT
    option: backend
    value: polling

# Enable the ssh jail
- name: Enable the ssh jail
  ini_file:
    path: /etc/fail2ban/jail.local
    section: ssh
    option: enabled
    value: true

# Restart the fail2ban service
- name: Restart the fail2ban service
  service:
    name: fail2ban
    state: restarted


- name: Copy unattended-upgrades configuration files in place.
  ansible.builtin.template:
    src: "templates/{{ item }}.j2"
    dest: "/etc/apt/apt.conf.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - 20auto-upgrades
    - 50unattended-upgrades

- name: add docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: add docker apt repo
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

- name: install docker and its dependencies
  ansible.builtin.apt:
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

- name: start and enable docker daemon
  service:
    name: docker
    state: started
    enabled: yes

- name: start and enable containerd daemon
  service:
    name: containerd
    state: started
    enabled: yes

- name: Check if reboot is required
  register: reboot_required_file
  ansible.builtin.stat: path=/var/run/reboot-required get_md5=no

- name: Reboot the server
  tags: reboot
  become_user: root
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: reboot_required_file.stat.exists == true

- name: Wait for the reboot to complete if there was a change.
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 300
  when: reboot_required_file.stat.exists == true

- name: Check the Uptime of the servers
  shell: "uptime"
  register: Uptime

- debug: var=Uptime
  
